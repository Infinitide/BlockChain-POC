/*
 * This is a Proof of Concept for the Applied Cryptography Module of Singaproe Polytechnic DISM
 * Refer to LICENSE for more info related to licensing
 */
package blockchain.poc;

import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author YongZe
 */
public class BlockChainPOC extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public BlockChainPOC() {
        genesis();
        initComponents();
        populate();
    }
    
    private void populate(){
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        String rowData[] = new String[MESSAGE.size()];
        for (int i=0; i<MESSAGE.size(); i++){
            rowData[i] = MESSAGE.get(i).getMessage();
            model.addRow(new Object[]{rowData[i]});
        }

    }
    
    private boolean isValid(int i){
        return (MESSAGE.get(i).getMessage().hashCode() == MESSAGE.get(i).getCurrentHash());
    }
    
    private void update(TableModelEvent e){
        if(e.getType() == TableModelEvent.UPDATE){
        int r = e.getFirstRow();
            System.out.println(r);
            int c = 0;
            System.out.println(c);
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            String value = (String) model.getValueAt(r, c);
            System.out.println(value);
            MESSAGE.get(r).setMessage(value);
            TableColumn tm = jTable1.getColumnModel().getColumn(c);
            if (!isValid(r)) {
                tm.setCellRenderer(new MyRenderer(Color.RED));
            }
        }
    }
    
    private class MyRenderer extends DefaultTableCellRenderer {

        Color backgroundColor = getBackground();
        public MyRenderer(Color c){
            backgroundColor = c;
        }
        
        @Override
        public Component getTableCellRendererComponent(
            JTable table, Object value, boolean isSelected,
            boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(
                table, value, isSelected, hasFocus, row, column);
            DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
            if (isSelected) {
                c.setBackground(backgroundColor);
            }
            return c;
        }
    }
    class ColorColumnRenderer extends DefaultTableCellRenderer {
       Color bkgndColor;
        private boolean isValid(int i){
            return (MESSAGE.get(i).getMessage().hashCode() == MESSAGE.get(i).getCurrentHash());
        }
       public ColorColumnRenderer(Color bkgnd) {
          super();
          bkgndColor = bkgnd;
       }

       public Component getTableCellRendererComponent
            (JTable table, Object value, boolean isSelected,
             boolean hasFocus, int row, int column)
       {
          Component cell = super.getTableCellRendererComponent
                     (table, value, isSelected, hasFocus, row, column);
                cell.setBackground(bkgndColor);
          return cell;
       }
    }
    private void genesis(){
        String genesis = "This is the genesis message";
        MESSAGE.add(new Message(-1, genesis, genesis.hashCode()));
        PREVHASH = genesis.hashCode();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.getModel().addTableModelListener(new TableModelListener() {

            public void tableChanged(TableModelEvent e) {
                update(e);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Add Text");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 421, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String s = JOptionPane.showInputDialog(this, "What would you like to add");
        Message m = new Message(PREVHASH, s, s.hashCode());
        MESSAGE.add(m);
        PREVHASH = s.hashCode();
        populate();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BlockChainPOC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BlockChainPOC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BlockChainPOC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BlockChainPOC.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BlockChainPOC().setVisible(true);
            }
        });
    }
    
    private int PREVHASH;
    private ArrayList<Message> MESSAGE = new ArrayList<Message>();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
